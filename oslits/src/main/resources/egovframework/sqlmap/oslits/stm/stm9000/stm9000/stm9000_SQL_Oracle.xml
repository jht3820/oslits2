<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="stm9000DAO">

	<!--  in / out class define  -->
    <typeAlias alias="stm9000VO"	type="kr.opensoftlab.oslits.stm.stm9000.stm9000.vo.Stm9000VO"/>
	<typeAlias alias="egovMap"	 	type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	
	<!-- Map Define -->
   	<resultMap id="resultMapSelectStm9000" class="stm9000VO">
		<result property="rn"  				column="RN"/>
	
		<result property="reqId"              column="REQ_ID" /> 
		<result property="orgReqId"              column="ORG_REQ_ID" /> 
		<result property="reqNm"              column="REQ_NM" /> 
		<result property="reqDesc"              column="REQ_DESC" /> 
		<result property="reqProTypeNm"              column="REQ_PRO_TYPE_NM" /> 
		<result property="regDtm"              column="REG_DTM" /> 
		<result property="reqUsrNm"              column="REQ_USR_NM" /> 
		<result property="reqStDtm"              column="REQ_ST_DTM" /> 
		<result property="reqEdDtm"              column="REQ_ED_DTM" /> 
		<result property="reqStDuDtm"              column="REQ_ST_DU_DTM" /> 
		<result property="reqEdDuDtm"              column="REQ_ED_DU_DTM" /> 

    </resultMap>


	
	<sql id="selectStm9000List">
		<![CDATA[
		SELECT ROWNUM RN ,
			   T1.* 
		FROM
		(
			
			SELECT     *
			FROM (
				SELECT

								A.REQ_ID
	          				, 	A.ORG_REQ_ID          
							, 	A.REQ_NM
	          				, 	REGEXP_REPLACE (A.REQ_DESC ,'</br>|<br>|<br/>' , ' ' ) AS REQ_DESC  
				          	, 	SF_ADM4100_COM_CD_INFO(#licGrpId#, 'REQ00008', A.REQ_PRO_TYPE, '1') AS REQ_PRO_TYPE_NM
				          	,	TO_CHAR(A.REG_DTM, 'YYYY-MM-DD') AS REG_DTM
				          	,	NVL(A.REQ_USR_NM, SF_ADM2000_USR_INFO(A.REQ_USR_ID, '1'))  AS REQ_USR_NM
				          	,	NVL2(A.REQ_ST_DTM, TO_CHAR(A.REQ_ST_DTM, 'YYYY-MM-DD') , '') REQ_ST_DTM
	    		  			,	NVL2(A.REQ_ED_DTM, TO_CHAR(A.REQ_ED_DTM, 'YYYY-MM-DD') , '') REQ_ED_DTM
							,	NVL2(A.REQ_ST_DU_DTM, TO_CHAR(A.REQ_ST_DU_DTM, 'YYYY-MM-DD') , '') REQ_ST_DU_DTM
							,	NVL2(A.REQ_ED_DU_DTM, TO_CHAR(A.REQ_ED_DU_DTM, 'YYYY-MM-DD') , '') REQ_ED_DU_DTM
						
			    FROM REQ4100  A , PRJ1000 B
			    WHERE 1 = 1
			    AND A.PRJ_ID = B.PRJ_ID
			    AND A.PRJ_ID = #prjId#
			    AND B.LIC_GRP_ID = #licGrpId#
		    ) B
		    WHERE 1=1
		    ]]>
            <isNotEmpty property="restApiReqUsrNm">
				AND		B.REQ_USR_NM LIKE '%' || #restApiReqUsrNm# || '%'
			</isNotEmpty>
			<isNotEmpty property="srchFromDt">
				AND 	B.REG_DTM &gt;= TO_DATE(#srchFromDt#, 'YYYY-MM-DD')
			</isNotEmpty>
			<isNotEmpty property="srchToDt">
				AND 	B.REG_DTM &lt;=   TO_DATE(#srchToDt#, 'YYYY-MM-DD') + 1
			</isNotEmpty>
		    ORDER BY  B.REG_DTM DESC
		) T1			
		    

    </sql>
    
   
    <!-- 요구사항 목록 조회 -->
    <select id="stm9000DAO.selectStm9000List" parameterClass="Stm9000VO"   resultClass="egovMap"  >
	    /*req4100DAO.selectReq4100List 요구사항 목록을 조회한다.*/
		SELECT *
		FROM
			(
				<include refid="selectStm9000List"/>
	    	)
	    	WHERE RN BETWEEN (#firstIndex#+1) AND #lastIndex#
    </select>
    
    <!-- 요구사항 목록 총건수. :페이징 처리 부분 -->
    <select id="stm9000DAO.selectStm9000ListCnt" parameterClass="Stm9000VO"  resultClass="java.lang.Integer">
	    /*req4100DAO.selectReq4100ListCnt 요구사항 목록 총건수를 조회한다.*/
	    SELECT
			COUNT(*)
		FROM	(
			<include refid="selectStm9000List"/>
		) A
    </select>
    
    <!-- 요구사항 정보 조회(단건) -->
	<select id="stm9000DAO.selectStm9000DetailInfo" parameterClass="java.util.Map"  resultClass="egovMap">
		/* stm9000DAO.selectStm9000DetailInfo - 요구사항 정보 조회(단건) */
		<![CDATA[
		SELECT 		 	A.REQ_ORD ,
				        A.REQ_ID ,
				       	SF_ADM4100_COM_CD_INFO(#licGrpId#, 'REQ00009', A.REQ_NEW_TYPE, '1') AS REQ_NEW_TYPE_NM ,
				       	NVL(A.REQ_USR_NM, SF_ADM2000_USR_INFO(A.REQ_USR_ID, '1'))              AS REQ_USR_NM ,
				       	A.REQ_USR_EMAIL ,
				       	A.REQ_NM ,
				       	REGEXP_REPLACE (A.REQ_DESC ,'</br>|<br>|<br/>' , ' ' )                 AS REQ_DESC ,
				       	SF_ADM4100_COM_CD_INFO(#licGrpId#, 'REQ00008', A.REQ_PRO_TYPE, '1') AS REQ_PRO_TYPE_NM ,
				       	TO_CHAR(A.REQ_DTM, 'YYYY-MM-DD')                                       AS REQ_DTM ,
				       	NVL2(A.REQ_ST_DTM, TO_CHAR(A.REQ_ST_DTM, 'YYYY-MM-DD HH24:MI') , '') REQ_ST_DTM ,
				       	NVL2(A.REQ_ED_DTM, TO_CHAR(A.REQ_ED_DTM, 'YYYY-MM-DD HH24:MI') , '') REQ_ED_DTM ,
				       	NVL2(A.REQ_ST_DU_DTM, TO_CHAR(A.REQ_ST_DU_DTM, 'YYYY-MM-DD') , '') REQ_ST_DU_DTM ,
				       	NVL2(A.REQ_ED_DU_DTM, TO_CHAR(A.REQ_ED_DU_DTM, 'YYYY-MM-DD') , '') REQ_ED_DU_DTM ,
				       	NVL(SF_REQ4000_REQ_CLS_NM(A.PRJ_ID, A.REQ_CLS_ID, '2'), '')           AS REQ_CLS_NM ,
				       	SF_ADM4100_COM_CD_INFO(#licGrpId#, 'REQ00012', A.REQ_TYPE_CD, '1') AS REQ_TYPE_NM ,
				       	A.REQ_USR_DEPT_NM ,
				       	SF_ADM4100_COM_CD_INFO(#licGrpId#, 'REQ00011', A.SCL_CD, '1') AS SCL_NM
			FROM   REQ4100 A ,
			       PRJ1000 B
			WHERE  1        =1
			AND    A.PRJ_ID = B.PRJ_ID
			AND    A.PRJ_ID =  #prjId#
			AND		B.LIC_GRP_ID = #licGrpId#
		]]>
		<isNotEmpty property="reqId">
	    	AND	   A.REQ_ID = #reqId#
	    </isNotEmpty>
	    <isNotEmpty property="orgReqId">
	    	AND	   A.ORG_REQ_ID = #orgReqId#
	    </isNotEmpty>
	    
	</select>
	
	
	
	<!-- 요구사항 변경이력 정보 가져오기-->
	<select id="stm9000DAO.selectStm9000ReqHistoryList" parameterClass="java.util.Map" resultClass="egovMap">
		<![CDATA[
			/* stm9000DAO.selectStm9000ReqHistoryList - 요구사항 변경이력 정보 가져오기  */
			SELECT 'CHG' AS TYPE 
					,A.PRJ_ID
					,A.REQ_ID
					,D.REQ_NM
					,A.REQ_CHG_ID
					,A.REQ_CHG_TYPE
					,A.CHG_USR_ID
					,SF_ADM2000_USR_INFO(A.CHG_USR_ID,'1') AS CHG_USR_NM
					,SF_ADM2000_USR_INFO(A.CHG_USR_ID,'2') AS CHG_USR_EMAIL
					,A.CHG_DTM
					,A.PROCESS_ID
					,E.PROCESS_NM
					,A.PRE_FLOW_ID
					,B.FLOW_NM AS PRE_FLOW_NM
					,B.FLOW_ESSENTIAL_CD AS PRE_FLOW_ESSENTIAL_CD
					,B.FLOW_SIGN_CD AS PRE_FLOW_SIGN_CD
					,B.FLOW_END_CD AS PRE_FLOW_END_CD
					,B.FLOW_WORK_CD AS PRE_FLOW_WORK_CD
					,B.FLOW_REVISION_CD AS PRE_FLOW_REVISION_CD
					,B.FLOW_DPL_CD AS PRE_FLOW_DPL_CD
					,B.FLOW_AUTH_CD AS PRE_FLOW_AUTH_CD
					,B.FLOW_NEXT_ID AS PRE_FLOW_NEXT_ID
					,(
					  SELECT COUNT(*)
					  FROM FLW1200 Z
					  WHERE 1=1
					  AND Z.PRJ_ID = B.PRJ_ID
					  AND Z.PROCESS_ID = B.PROCESS_ID
					  AND Z.FLOW_ID = B.FLOW_ID
					) AS PRE_FLOW_OPT_CNT
			
					,A.CHG_FLOW_ID
					,C.FLOW_NM AS CHG_FLOW_NM
					,C.FLOW_ESSENTIAL_CD AS CHG_FLOW_ESSENTIAL_CD
					,C.FLOW_SIGN_CD AS CHG_FLOW_SIGN_CD
					,C.FLOW_END_CD AS CHG_FLOW_END_CD
					,C.FLOW_WORK_CD AS CHG_FLOW_WORK_CD
					,C.FLOW_REVISION_CD AS CHG_FLOW_REVISION_CD
					,C.FLOW_DPL_CD AS CHG_FLOW_DPL_CD
					,C.FLOW_AUTH_CD AS CHG_FLOW_AUTH_CD
					,C.FLOW_NEXT_ID AS CHG_FLOW_NEXT_ID
					,(
					  SELECT COUNT(*)
					  FROM FLW1200 Z
					  WHERE 1=1
					  AND Z.PRJ_ID = C.PRJ_ID
					  AND Z.PROCESS_ID = C.PROCESS_ID
					  AND Z.FLOW_ID = C.FLOW_ID
					) AS CHG_FLOW_OPT_CNT
			
					,A.PRE_CHARGER_ID
					,SF_ADM2000_USR_INFO(A.PRE_CHARGER_ID,'1') AS PRE_CHARGER_NM
				
					,A.CHG_CHARGER_ID
					,SF_ADM2000_USR_INFO(A.CHG_CHARGER_ID,'1') AS CHG_CHARGER_NM
					
				
			FROM REQ4700 A, FLW1100 B, FLW1100 C, REQ4100 D, FLW1000 E
			WHERE 1=1
				AND A.PRJ_ID = B.PRJ_ID(+)
				AND A.PROCESS_ID = B.PROCESS_ID(+)
				AND A.PRE_FLOW_ID = B.FLOW_ID(+)
				AND A.PRJ_ID = C.PRJ_ID(+)
				AND A.PROCESS_ID = C.PROCESS_ID(+)
				AND A.CHG_FLOW_ID = C.FLOW_ID(+)
				AND A.PRJ_ID = D.PRJ_ID
				AND A.REQ_ID = D.REQ_ID(+)
				AND A.PRJ_ID = E.PRJ_ID(+)
				AND A.PROCESS_ID = E.PROCESS_ID(+)
				AND A.REQ_CHG_TYPE != '02'
				AND		A.PRJ_ID = #prjId#
				AND A.REQ_ID = #reqId#
		]]>
	</select>
	
	<!-- 요구사항 결재 정보 가져오기-->
	<select id="stm9000DAO.selectStm9000ReqSignList" parameterClass="java.util.Map" resultClass="egovMap">
		<![CDATA[
			/* stm9000DAO.selectStm9000ReqSignList - 요구사항 결재 정보 가져오기  */
			SELECT 'CHK' TYPE  
				,A.PRJ_ID
				,A.REQ_ID
				,C.REQ_NM
				,A.SIGN_ID
				,A.PROCESS_ID
				,B.FLOW_ID AS PREV_FLOW_ID
				,A.SIGN_FLOW_ID
				,B.FLOW_NM AS SIGN_FLOW_NM

				,A.SIGN_USR_ID
				,SF_ADM2000_USR_INFO(A.SIGN_USR_ID,'1') AS SIGN_USR_NM
				
				,A.SIGN_CD
				,SF_ADM4100_COM_CD_INFO(#licGrpId#,'REQ00004',A.SIGN_CD,'1') AS SIGN_CD_NM
				,REGEXP_REPLACE (A.SIGN_REJECT_CMNT ,'</br>|<br>|<br/>' , ' ' ) AS SIGN_REJECT_CMNT
				,A.SIGN_DTM
				,A.REG_DTM
				,A.REG_USR_ID
				,SF_ADM2000_USR_INFO(A.REG_USR_ID,'1') AS REG_USR_NM
				
			FROM REQ4900 A, FLW1100 B, REQ4100 C
			]]>
			
			WHERE 1=1
				AND A.PRJ_ID = B.PRJ_ID
				AND A.PROCESS_ID = B.PROCESS_ID
				AND A.SIGN_FLOW_ID = B.FLOW_NEXT_ID(+)
				AND A.PRJ_ID = C.PRJ_ID
				AND A.REQ_ID = C.REQ_ID(+)
			
			
				AND	A.PRJ_ID = #prjId#
			
				AND A.REQ_ID = #reqId#
			
	</select>
	
	<!-- 요구사항 수정이력 목록 가져오기 -->
	<select id="stm9000DAO.selectStm9000ChgDetailList" parameterClass="java.util.Map" resultClass="egovMap">
		<![CDATA[
			/* stm9000DAO.selectStm9000ChgDetailList - 요구사항 수정이력 목록 가져오기 */ 
			SELECT 'MOD' AS TYPE ,
				A.PRJ_ID,					A.REQ_ID,				A.CHG_DETAIL_ID,			A.CHG_DETAIL_NUM
	            ,A.CHG_DETAIL_TYPE,			A.CHG_DETAIL_NM
	            ,CASE A.CHG_DETAIL_OPT_TYPE
                	WHEN '02' THEN SF_ADM4100_COM_CD_INFO(#licGrpId#,A.CHG_DETAIL_COMMON_CD, A.PRE_DETAIL_VAL,'1')
					WHEN '03' THEN SF_ADM2000_USR_INFO(A.PRE_DETAIL_VAL,'1')
					WHEN '04' THEN (SELECT REQ_CLS_NM FROM REQ4000 WHERE 1=1 AND PRJ_ID = A.PRJ_ID AND REQ_CLS_ID = A.PRE_DETAIL_VAL)
                    ELSE A.PRE_DETAIL_VAL
                END AS PRE_DETAIL_VAL
                ,CASE A.CHG_DETAIL_OPT_TYPE
                	WHEN '02' THEN SF_ADM4100_COM_CD_INFO(#licGrpId#,A.CHG_DETAIL_COMMON_CD, A.CHG_DETAIL_VAL,'1')
					WHEN '03' THEN SF_ADM2000_USR_INFO(A.CHG_DETAIL_VAL,'1')
					WHEN '04' THEN (SELECT REQ_CLS_NM FROM REQ4000 WHERE 1=1 AND PRJ_ID = A.PRJ_ID AND REQ_CLS_ID = A.CHG_DETAIL_VAL)
                    ELSE A.CHG_DETAIL_VAL
                END AS CHG_DETAIL_VAL
	            ,SF_ADM2000_USR_INFO(A.REG_USR_ID,'1') AS REG_USR_NM
				,SF_ADM2000_USR_INFO(A.REG_USR_ID,'2') AS REG_USR_EMAIL
              
	            , A.REG_DTM
	            , A.REG_USR_ID
			FROM REQ4800 A
			WHERE 1=1
		]]>
			
			AND		A.PRJ_ID = #prjId#
			
			AND		A.REQ_ID = #reqId#
				
	
	</select>
	
</sqlMap>